// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AnkamaGames

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ManifestItem struct {
	_tab flatbuffers.Table
}

func GetRootAsManifestItem(buf []byte, offset flatbuffers.UOffsetT) *ManifestItem {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ManifestItem{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsManifestItem(buf []byte, offset flatbuffers.UOffsetT) *ManifestItem {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ManifestItem{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ManifestItem) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ManifestItem) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ManifestItem) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ManifestItem) Size() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ManifestItem) MutateSize(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *ManifestItem) Hash() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ManifestItem) Executable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ManifestItem) MutateExecutable(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *ManifestItem) Symlink() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ManifestItemStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func ManifestItemAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func ManifestItemAddSize(builder *flatbuffers.Builder, size int32) {
	builder.PrependInt32Slot(1, size, 0)
}
func ManifestItemAddHash(builder *flatbuffers.Builder, hash flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(hash), 0)
}
func ManifestItemAddExecutable(builder *flatbuffers.Builder, executable bool) {
	builder.PrependBoolSlot(3, executable, false)
}
func ManifestItemAddSymlink(builder *flatbuffers.Builder, symlink flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(symlink), 0)
}
func ManifestItemEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
